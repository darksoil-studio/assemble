import {
  decorateProperty
} from "./chunk-HKTNVJXR.js";

// ../node_modules/@lit-labs/context/development/lib/context-request-event.js
var ContextRequestEvent = class extends Event {
  /**
   *
   * @param context the context key to request
   * @param callback the callback that should be invoked when the context with the specified key is available
   * @param subscribe an optional argument, if true indicates we want to subscribe to future updates
   */
  constructor(context, callback, subscribe) {
    super("context-request", { bubbles: true, composed: true });
    this.context = context;
    this.callback = callback;
    this.subscribe = subscribe;
  }
};

// ../node_modules/@lit-labs/context/development/lib/create-context.js
function createContext(key) {
  return key;
}

// ../node_modules/@lit-labs/context/development/lib/controllers/context-consumer.js
var ContextConsumer = class {
  constructor(host, context, callback, subscribe = false) {
    this.host = host;
    this.context = context;
    this.callback = callback;
    this.subscribe = subscribe;
    this.provided = false;
    this.value = void 0;
    this.host.addController(this);
  }
  hostConnected() {
    this.dispatchRequest();
  }
  hostDisconnected() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = void 0;
    }
  }
  dispatchRequest() {
    this.host.dispatchEvent(new ContextRequestEvent(this.context, (value, unsubscribe) => {
      if (this.unsubscribe) {
        if (this.unsubscribe !== unsubscribe) {
          this.provided = false;
          this.unsubscribe();
        }
        if (!this.subscribe) {
          this.unsubscribe();
        }
      }
      this.value = value;
      this.host.requestUpdate();
      if (!this.provided || this.subscribe) {
        this.provided = true;
        if (this.callback) {
          this.callback(value, unsubscribe);
        }
      }
      this.unsubscribe = unsubscribe;
    }, this.subscribe));
  }
};

// ../node_modules/@lit-labs/context/development/lib/value-notifier.js
var ValueNotifier = class {
  constructor(defaultValue) {
    this.callbacks = /* @__PURE__ */ new Map();
    this.updateObservers = () => {
      for (const [callback, disposer] of this.callbacks) {
        callback(this._value, disposer);
      }
    };
    if (defaultValue !== void 0) {
      this.value = defaultValue;
    }
  }
  get value() {
    return this._value;
  }
  set value(v) {
    this.setValue(v);
  }
  setValue(v, force = false) {
    const update = force || !Object.is(v, this._value);
    this._value = v;
    if (update) {
      this.updateObservers();
    }
  }
  addCallback(callback, subscribe) {
    if (subscribe) {
      if (!this.callbacks.has(callback)) {
        this.callbacks.set(callback, () => {
          this.callbacks.delete(callback);
        });
      }
    }
    callback(this.value);
  }
  clearCallbacks() {
    this.callbacks.clear();
  }
};

// ../node_modules/@lit-labs/context/development/lib/controllers/context-provider.js
var ContextProviderEvent = class extends Event {
  /**
   *
   * @param context the context which this provider can provide
   */
  constructor(context) {
    super("context-provider", { bubbles: true, composed: true });
    this.context = context;
  }
};
var ContextProvider = class extends ValueNotifier {
  constructor(host, context, initialValue) {
    super(initialValue);
    this.host = host;
    this.context = context;
    this.onContextRequest = (ev) => {
      if (ev.context !== this.context || ev.composedPath()[0] === this.host) {
        return;
      }
      ev.stopPropagation();
      this.addCallback(ev.callback, ev.subscribe);
    };
    this.attachListeners();
    this.host.addController(this);
  }
  attachListeners() {
    this.host.addEventListener("context-request", this.onContextRequest);
  }
  hostConnected() {
    this.host.dispatchEvent(new ContextProviderEvent(this.context));
  }
};

// ../node_modules/@lit-labs/context/development/lib/context-root.js
var ContextRoot = class {
  constructor() {
    this.pendingContextRequests = /* @__PURE__ */ new Map();
    this.onContextProvider = (ev) => {
      const pendingRequests = this.pendingContextRequests.get(ev.context);
      if (!pendingRequests) {
        return;
      }
      this.pendingContextRequests.delete(ev.context);
      pendingRequests.forEach((request) => {
        const element = request.element;
        const callback = request.callback;
        if (element) {
          element.dispatchEvent(new ContextRequestEvent(ev.context, callback, true));
        }
      });
    };
    this.onContextRequest = (ev) => {
      if (!ev.subscribe) {
        return;
      }
      const request = {
        element: ev.target,
        callback: ev.callback
      };
      let pendingContextRequests = this.pendingContextRequests.get(ev.context);
      if (!pendingContextRequests) {
        pendingContextRequests = /* @__PURE__ */ new Set();
        this.pendingContextRequests.set(ev.context, pendingContextRequests);
      }
      pendingContextRequests.add(request);
    };
  }
  /**
   * Attach the ContextRoot to a given element to intercept `context-request` and
   * `context-provider` events.
   *
   * @param element an element to add event listeners to
   */
  attach(element) {
    element.addEventListener("context-request", this.onContextRequest);
    element.addEventListener("context-provider", this.onContextProvider);
  }
  /**
   * Removes the ContextRoot event listeners from a given element.
   *
   * @param element an element from which to remove event listeners
   */
  detach(element) {
    element.removeEventListener("context-request", this.onContextRequest);
    element.removeEventListener("context-provider", this.onContextProvider);
  }
};

// ../node_modules/@lit-labs/context/development/lib/decorators/provide.js
function provide({ context }) {
  return decorateProperty({
    finisher: (ctor, name) => {
      const controllerMap = /* @__PURE__ */ new WeakMap();
      ctor.addInitializer((element) => {
        controllerMap.set(element, new ContextProvider(element, context));
      });
      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);
      const oldSetter = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;
      const newDescriptor = {
        ...descriptor,
        set: function(value) {
          var _a;
          (_a = controllerMap.get(this)) === null || _a === void 0 ? void 0 : _a.setValue(value);
          if (oldSetter) {
            oldSetter.call(this, value);
          }
        }
      };
      Object.defineProperty(ctor.prototype, name, newDescriptor);
    }
  });
}

// ../node_modules/@lit-labs/context/development/lib/decorators/consume.js
function consume({ context, subscribe }) {
  return decorateProperty({
    finisher: (ctor, name) => {
      ctor.addInitializer((element) => {
        new ContextConsumer(element, context, (value) => {
          element[name] = value;
        }, subscribe);
      });
    }
  });
}

// ../node_modules/@lit-labs/context/development/index.js
var contextProvider = provide;
var contextProvided = consume;

export {
  ContextRequestEvent,
  createContext,
  ContextConsumer,
  ContextProvider,
  ContextRoot,
  provide,
  consume,
  contextProvider,
  contextProvided
};
/*! Bundled license information:

@lit-labs/context/development/lib/context-request-event.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/create-context.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/controllers/context-consumer.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/value-notifier.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/controllers/context-provider.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/context-root.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/decorators/provide.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/lib/decorators/consume.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit-labs/context/development/index.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=chunk-3YCQAOGZ.js.map
