import {
  Directive,
  directive
} from "./chunk-Z25JP4L2.js";
import {
  wrapPathInSvg
} from "./chunk-3RFPZPGH.js";
import {
  mdiAlertCircleOutline,
  mdiInformationOutline
} from "./chunk-IIYOD65B.js";
import {
  decodeHashFromBase64
} from "./chunk-BQBER75O.js";

// ../node_modules/@holochain-open-dev/elements/dist/form-field-controller.js
var FormFieldController = class {
  constructor(host) {
    this.host = host;
    this.host.addController(this);
    this.handleFormData = this.handleFormData.bind(this);
    this.handleFormSubmit = this.handleFormSubmit.bind(this);
    this.handleFormReset = this.handleFormReset.bind(this);
  }
  hostConnected() {
    this.form = this.host.closest("form");
    if (this.form) {
      this.form.addEventListener("formdata", this.handleFormData);
      this.form.addEventListener("submit", this.handleFormSubmit);
      this.form.addEventListener("reset", this.handleFormReset);
    }
  }
  hostDisconnected() {
    if (this.form) {
      this.form.removeEventListener("formdata", this.handleFormData);
      this.form.removeEventListener("submit", this.handleFormSubmit);
      this.form.removeEventListener("reset", this.handleFormReset);
      this.form = void 0;
    }
  }
  handleFormData(event) {
    const disabled = this.host.disabled;
    const name = this.host.name;
    const value = this.host.value;
    if (!disabled && name && value !== void 0) {
      if (Array.isArray(value)) {
        value.map((val) => event.formData.append(name, val));
      } else {
        event.formData.append(name, value);
      }
    }
  }
  handleFormSubmit(event) {
    const form = this.form;
    const disabled = this.host.disabled;
    const reportValidity = this.host.reportValidity;
    if (form && !form.noValidate && !disabled && reportValidity && !this.host.reportValidity()) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }
  }
  handleFormReset(_event) {
    this.host.reset();
  }
};

// ../node_modules/@holochain-open-dev/elements/dist/on-submit.js
function holoHashValue(value) {
  if (typeof value === "string" && value.split(",").length === 39)
    return new Uint8Array(value.split(",").map((s) => parseInt(s, 10)));
  return value;
}
function serialize(form) {
  const formData = new FormData(form);
  const object = {};
  formData.forEach((value, key) => {
    if (Reflect.has(object, key)) {
      const entry = object[key];
      if (Array.isArray(entry)) {
        entry.push(holoHashValue(value));
      } else {
        object[key] = [object[key], holoHashValue(value)];
      }
    } else {
      object[key] = holoHashValue(value);
    }
  });
  return object;
}
var OnSubmitDirective = class extends Directive {
  update(part, props) {
    setTimeout(() => {
      part.element.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = serialize(part.element);
        props[0](formData);
      });
    }, 100);
  }
  render(_onSubmitCallback) {
    return ``;
  }
};
var onSubmit = directive(OnSubmitDirective);

// ../node_modules/@holochain-open-dev/elements/dist/holo-hash-property.js
function hashState() {
  return {
    hasChanged: (oldVal, newVal) => (oldVal == null ? void 0 : oldVal.toString()) !== (newVal == null ? void 0 : newVal.toString())
  };
}
function hashProperty(attributeName) {
  return {
    attribute: attributeName,
    type: Object,
    hasChanged: (oldVal, newVal) => (oldVal == null ? void 0 : oldVal.toString()) !== (newVal == null ? void 0 : newVal.toString()),
    converter: (s) => s && s.length > 0 && decodeHashFromBase64(s)
  };
}

// ../node_modules/@holochain-open-dev/elements/dist/notify.js
function escapeHtml(html) {
  const div = document.createElement("div");
  div.textContent = html;
  return div.innerHTML;
}
function notify(message, variant = "primary", iconPath = mdiInformationOutline, duration = 3e3) {
  const alert = Object.assign(document.createElement("sl-alert"), {
    variant,
    closable: true,
    duration,
    innerHTML: `
        <sl-icon src="${wrapPathInSvg(iconPath)}" slot="icon"></sl-icon>
        ${escapeHtml(message)}
      `
  });
  document.body.append(alert);
  return alert.toast();
}
function notifyError(message) {
  return notify(message, "danger", mdiAlertCircleOutline);
}

export {
  FormFieldController,
  serialize,
  onSubmit,
  hashState,
  hashProperty,
  notify,
  notifyError
};
//# sourceMappingURL=chunk-DAJL6BEK.js.map
