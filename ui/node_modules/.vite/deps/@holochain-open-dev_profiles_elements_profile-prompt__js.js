import "./chunk-VIOHZJSL.js";
import {
  localized,
  msg,
  str
} from "./chunk-F6ASJTBR.js";
import "./chunk-RFJMLXEB.js";
import "./chunk-JII5UACP.js";
import "./chunk-62WHVPAR.js";
import "./chunk-DF7YV2S3.js";
import "./chunk-E3D7COAG.js";
import "./chunk-EYRRC6UH.js";
import "./chunk-D2HY3KBX.js";
import "./chunk-X37UHD3P.js";
import {
  FormFieldController,
  onSubmit
} from "./chunk-DAJL6BEK.js";
import "./chunk-Z25JP4L2.js";
import "./chunk-5AU5YFN7.js";
import {
  customElement,
  property,
  query
} from "./chunk-R77AHWUQ.js";
import "./chunk-VT4NHFXN.js";
import "./chunk-ZDQLAAEM.js";
import "./chunk-MHLOHHZ4.js";
import {
  o
} from "./chunk-7AYIQQIN.js";
import {
  watch
} from "./chunk-GGKYR3PF.js";
import "./chunk-6ONNKO2T.js";
import {
  ShoelaceElement,
  __decorateClass,
  component_styles_default,
  e,
  e2,
  i,
  t,
  y
} from "./chunk-JDPGJZI5.js";
import {
  sharedStyles,
  wrapPathInSvg
} from "./chunk-3RFPZPGH.js";
import {
  LitElement
} from "./chunk-MQKSVDTB.js";
import {
  html
} from "./chunk-PKY6L6VL.js";
import {
  mdiPlus
} from "./chunk-IIYOD65B.js";
import {
  profilesStoreContext
} from "./chunk-23FC4LHD.js";
import {
  StoreSubscriber
} from "./chunk-7ZTK7722.js";
import {
  css
} from "./chunk-Y22KWEZP.js";
import "./chunk-6MCG4PU3.js";
import "./chunk-BQBER75O.js";
import "./chunk-UIQAYTRW.js";
import "./chunk-OVVSB36W.js";
import {
  consume
} from "./chunk-3YCQAOGZ.js";
import "./chunk-HKTNVJXR.js";
import "./chunk-YBOLLQGG.js";

// ../node_modules/tslib/tslib.es6.js
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i2 = decorators.length - 1; i2 >= 0; i2--)
      if (d = decorators[i2])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LBFGJPTQ.js
var avatar_styles_default = i`
  ${component_styles_default}

  :host {
    display: inline-block;

    --size: 3rem;
  }

  .avatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: var(--size);
    height: var(--size);
    background-color: var(--sl-color-neutral-400);
    font-family: var(--sl-font-sans);
    font-size: calc(var(--size) * 0.5);
    font-weight: var(--sl-font-weight-normal);
    color: var(--sl-color-neutral-0);
    user-select: none;
    vertical-align: middle;
  }

  .avatar--circle,
  .avatar--circle .avatar__image {
    border-radius: var(--sl-border-radius-circle);
  }

  .avatar--rounded,
  .avatar--rounded .avatar__image {
    border-radius: var(--sl-border-radius-medium);
  }

  .avatar--square {
    border-radius: 0;
  }

  .avatar__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .avatar__initials {
    line-height: 1;
    text-transform: uppercase;
  }

  .avatar__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    overflow: hidden;
  }
`;

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CGJSMDHW.js
var SlAvatar = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasError = false;
    this.image = "";
    this.label = "";
    this.initials = "";
    this.loading = "eager";
    this.shape = "circle";
  }
  handleImageChange() {
    this.hasError = false;
  }
  render() {
    return y`
      <div
        part="base"
        class=${o({
      avatar: true,
      "avatar--circle": this.shape === "circle",
      "avatar--rounded": this.shape === "rounded",
      "avatar--square": this.shape === "square"
    })}
        role="img"
        aria-label=${this.label}
      >
        ${this.initials ? y` <div part="initials" class="avatar__initials">${this.initials}</div> ` : y`
              <slot name="icon" part="icon" class="avatar__icon" aria-hidden="true">
                <sl-icon name="person-fill" library="system"></sl-icon>
              </slot>
            `}
        ${this.image && !this.hasError ? y`
              <img
                part="image"
                class="avatar__image"
                src="${this.image}"
                loading="${this.loading}"
                alt=""
                @error="${() => this.hasError = true}"
              />
            ` : ""}
      </div>
    `;
  }
};
SlAvatar.styles = avatar_styles_default;
__decorateClass([
  t()
], SlAvatar.prototype, "hasError", 2);
__decorateClass([
  e2()
], SlAvatar.prototype, "image", 2);
__decorateClass([
  e2()
], SlAvatar.prototype, "label", 2);
__decorateClass([
  e2()
], SlAvatar.prototype, "initials", 2);
__decorateClass([
  e2()
], SlAvatar.prototype, "loading", 2);
__decorateClass([
  e2({ reflect: true })
], SlAvatar.prototype, "shape", 2);
__decorateClass([
  watch("image")
], SlAvatar.prototype, "handleImageChange", 1);
SlAvatar = __decorateClass([
  e("sl-avatar")
], SlAvatar);

// ../node_modules/@holochain-open-dev/elements/dist/image.js
function resizeAndExport(img) {
  const MAX_WIDTH = 300;
  const MAX_HEIGHT = 300;
  let width = img.width;
  let height = img.height;
  if (width > height) {
    if (width > MAX_WIDTH) {
      height = height * (MAX_WIDTH / width);
      width = MAX_WIDTH;
    }
  } else {
    if (height > MAX_HEIGHT) {
      width = width * (MAX_HEIGHT / height);
      height = MAX_HEIGHT;
    }
  }
  const canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  const ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0, width, height);
  return canvas.toDataURL();
}

// ../node_modules/@holochain-open-dev/elements/dist/elements/select-avatar.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i2 = decorators.length - 1; i2 >= 0; i2--)
      if (d = decorators[i2])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectAvatar = class SelectAvatar2 extends LitElement {
  constructor() {
    super(...arguments);
    this.name = "avatar";
    this.required = false;
    this.shape = "circle";
    this.disabled = false;
    this._controller = new FormFieldController(this);
  }
  reportValidity() {
    const invalid = this.required !== false && !this.value;
    if (invalid) {
      this._errorInput.setCustomValidity("Avatar is required");
      this._errorInput.reportValidity();
    }
    return !invalid;
  }
  reset() {
    this.value = void 0;
  }
  onAvatarUploaded() {
    if (this._avatarFilePicker.files && this._avatarFilePicker.files[0]) {
      const reader = new FileReader();
      reader.onload = (e3) => {
        var _a;
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.onload = () => {
          this.value = resizeAndExport(img);
          this._avatarFilePicker.value = "";
        };
        img.src = (_a = e3.target) == null ? void 0 : _a.result;
        this.dispatchEvent(new CustomEvent("avatar-selected", {
          composed: true,
          bubbles: true,
          detail: {
            avatar: img.src
          }
        }));
      };
      reader.readAsDataURL(this._avatarFilePicker.files[0]);
    }
  }
  renderAvatar() {
    if (this.value)
      return html`
        <div
          class="column"
          style="align-items: center; height: 50px"
          @click=${() => {
        this.value = void 0;
      }}
        >
          <sl-tooltip .content=${msg("Clear")}>
            <sl-avatar
              image="${this.value}"
              alt="Avatar"
              .shape=${this.shape}
              initials=""
            ></sl-avatar
          ></sl-tooltip>
        </div>
      `;
    else
      return html` <div class="column" style="align-items: center;">
        <sl-button
          .disabled=${this.disabled}
          variant="default"
          size="large"
          circle
          @click=${() => this._avatarFilePicker.click()}
        >
          <sl-icon
            src="${wrapPathInSvg(mdiPlus)}"
            .label=${msg("Add avatar image")}
          ></sl-icon>
        </sl-button>
      </div>`;
  }
  render() {
    return html`<input
        type="file"
        id="avatar-file-picker"
        style="display: none"
        @change=${this.onAvatarUploaded}
      />
      <div class="column" style="position: relative; align-items: center">
        <input
          id="error-input"
          style="position: absolute; z-index: -1; left: 50%; top: 30px; height: 0; width: 0"
        />
        <span
          style="font-size: var(--sl-input-label-font-size-medium); margin-bottom: 4px"
          >${msg("Avatar")}${this.required !== false ? " *" : ""}</span
        >
        ${this.renderAvatar()}
      </div>`;
  }
};
SelectAvatar.styles = sharedStyles;
__decorate2([
  property({ attribute: "name" })
], SelectAvatar.prototype, "name", void 0);
__decorate2([
  property()
], SelectAvatar.prototype, "required", void 0);
__decorate2([
  property()
], SelectAvatar.prototype, "shape", void 0);
__decorate2([
  property()
], SelectAvatar.prototype, "value", void 0);
__decorate2([
  property()
], SelectAvatar.prototype, "disabled", void 0);
__decorate2([
  query("#avatar-file-picker")
], SelectAvatar.prototype, "_avatarFilePicker", void 0);
__decorate2([
  query("#error-input")
], SelectAvatar.prototype, "_errorInput", void 0);
SelectAvatar = __decorate2([
  customElement("select-avatar")
], SelectAvatar);

// ../node_modules/@holochain-open-dev/profiles/dist/elements/edit-profile.js
var EditProfile = class EditProfile2 extends LitElement {
  constructor() {
    super(...arguments);
    this.allowCancel = false;
  }
  /** Private properties */
  avatarMode() {
    return this.store.config.avatarMode === "avatar-required" || this.store.config.avatarMode === "avatar-optional";
  }
  fireSaveProfile(fields) {
    const nickname = fields["nickname"];
    delete fields["nickname"];
    const profile = {
      fields,
      nickname
    };
    this.dispatchEvent(new CustomEvent("save-profile", {
      detail: {
        profile
      },
      bubbles: true,
      composed: true
    }));
  }
  fireCancel() {
    this.dispatchEvent(new CustomEvent("cancel-edit-profile", {
      bubbles: true,
      composed: true
    }));
  }
  renderField(fieldConfig) {
    var _a;
    return html`
      <sl-input
        name="${fieldConfig.name}"
        .required=${fieldConfig.required}
        .label=${fieldConfig.label}
        .value=${((_a = this.profile) === null || _a === void 0 ? void 0 : _a.fields[fieldConfig.name]) || ""}
        style="margin-bottom: 16px;"
      ></sl-input>
    `;
  }
  render() {
    var _a, _b, _c;
    return html`
      <form
        id="profile-form"
        class="column"
        ${onSubmit((fields) => this.fireSaveProfile(fields))}
      >
        <div
          class="row"
          style="justify-content: center; align-self: start; margin-bottom: 16px"
        >
          ${this.avatarMode() ? html` <select-avatar
                name="avatar"
                .value=${((_a = this.profile) === null || _a === void 0 ? void 0 : _a.fields["avatar"]) || void 0}
                .required=${this.store.config.avatarMode === "avatar-required"}
              ></select-avatar>` : html``}

          <sl-input
            name="nickname"
            .label=${msg("Nickname")}
            required
            minLength="${this.store.config.minNicknameLength}"
            .value=${((_b = this.profile) === null || _b === void 0 ? void 0 : _b.nickname) || ""}
            .helpText=${msg(str`Min. ${this.store.config.minNicknameLength} characters`)}
            style="margin-left: 16px;"
          ></sl-input>
        </div>

        ${this.store.config.additionalFields.map((field) => this.renderField(field))}

        <div class="row" style="margin-top: 8px;">
          ${this.allowCancel ? html`
                <sl-button
                  style="flex: 1; margin-right: 6px;"
                  @click=${() => this.fireCancel()}
                >
                  ${msg("Cancel")}
                </sl-button>
              ` : html``}

          <sl-button style="flex: 1;" variant="primary" type="submit"
            >${(_c = this.saveProfileLabel) !== null && _c !== void 0 ? _c : msg("Save Profile")}
          </sl-button>
        </div>
      </form>
    `;
  }
};
EditProfile.styles = [sharedStyles];
__decorate([
  property({ type: Object })
], EditProfile.prototype, "profile", void 0);
__decorate([
  property({ type: String, attribute: "save-profile-label" })
], EditProfile.prototype, "saveProfileLabel", void 0);
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], EditProfile.prototype, "store", void 0);
__decorate([
  property({ type: Boolean, attribute: "allow-cancel" })
], EditProfile.prototype, "allowCancel", void 0);
EditProfile = __decorate([
  localized(),
  customElement("edit-profile")
], EditProfile);

// ../node_modules/@holochain-open-dev/profiles/dist/elements/create-profile.js
var CreateProfile = class CreateProfile2 extends LitElement {
  /** Private properties */
  async createProfile(profile) {
    await this.store.client.createProfile(profile);
    this.dispatchEvent(new CustomEvent("profile-created", {
      detail: {
        profile
      },
      bubbles: true,
      composed: true
    }));
  }
  render() {
    return html`
      <sl-card>
        <div class="column">
          <span
            class="title"
            style="margin-bottom: 16px; align-self: flex-start"
            >${msg("Create Profile")}</span
          >
          <edit-profile
            .saveProfileLabel=${msg("Create Profile")}
            .store=${this.store}
            @save-profile=${(e3) => this.createProfile(e3.detail.profile)}
          ></edit-profile></div
      ></sl-card>
    `;
  }
};
CreateProfile.styles = [sharedStyles];
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], CreateProfile.prototype, "store", void 0);
CreateProfile = __decorate([
  localized(),
  customElement("create-profile")
], CreateProfile);

// ../node_modules/@holochain-open-dev/profiles/dist/elements/profile-prompt.js
var ProfilePrompt = class ProfilePrompt2 extends LitElement {
  constructor() {
    super(...arguments);
    this._myProfile = new StoreSubscriber(this, () => this.store.myProfile);
  }
  renderPrompt(myProfile) {
    if (myProfile)
      return html`<slot></slot>`;
    return html`
      <div
        class="column"
        style="align-items: center; justify-content: center; flex: 1; padding-bottom: 10px;"
      >
        <div class="column" style="align-items: center;">
          <slot name="hero"></slot>
          <create-profile></create-profile>
        </div>
      </div>
    `;
  }
  render() {
    switch (this._myProfile.value.status) {
      case "pending":
        return html` <div
          class="column"
          style="align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case "complete":
        return this.renderPrompt(this._myProfile.value.value);
      case "error":
        return html`<display-error
          .headline=${msg("Error fetching your profile")}
          .error=${this._myProfile.value.error}
        ></display-error> `;
    }
  }
  static get styles() {
    return [
      sharedStyles,
      css`
        :host {
          display: flex;
          flex: 1;
        }
      `
    ];
  }
};
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], ProfilePrompt.prototype, "store", void 0);
ProfilePrompt = __decorate([
  localized(),
  customElement("profile-prompt")
], ProfilePrompt);
export {
  ProfilePrompt
};
//# sourceMappingURL=@holochain-open-dev_profiles_elements_profile-prompt__js.js.map
